<?php

// PHP 5.4 does not have password_verify etc. functions.
// This library provides compatible functions.
require_once('password_compat/password.php');

require_once('config.php');

require_once('include/view.php');
require_once('include/errors.php');
require_once('include/db.php');
require_once('include/mail.php');

require_once('db_user.php');

// Utility functions {{{

/// Get the path portion of the request URL.
function request_path() {
    return $_SERVER['PATH_INFO'];
}

/// Generate a relative or absolute URL.
function base_url($path='/', $absolute = false) {
    if (strlen($path) === 0 || strpos($path, '/') !== 0)
        $path = "/$path";

    if ($absolute) {
        // NB: Does not take port into account.
        return $_SERVER['REQUEST_SCHEME']
             . '://'
             . $_SERVER['SERVER_NAME']
             . $path;
    } else {
        return $path;
    }
}

/// Check a (request) path against a URL pattern.
/// This also handles ':keyword' URL parameter specifications, and returns the
/// respective values in the '$matches' assoc array.
///
/// e.g: if a path matches '/aoeu/:thing/:other/bla', $matches will be
/// `array('thing' => <something>, 'other' => <something>)`.
///
function match_path($path, $pattern, &$matches = array()) {
    // Generate a regex for matching the pattern, plus any paramaters.
    $pattern = preg_replace('/\\\:([a-zA-Z][a-zA-Z0-9]*)/', '(?P<$1>[^\/]+)',
                            preg_quote($pattern, '/'));

    return preg_match("/^$pattern\$/", $path, $matches);
}

/// Generate a hash string from $length_bytes randomly generated bytes.
/// The hash is returned as a string of hexadecimal characters.
/// i.e: returned string length is 2 x $length_bytes.
function random_hash($length_bytes) {
    $data = openssl_random_pseudo_bytes($length_bytes, $cstrong);
    if ($cstrong !== true)
        fail('Could not generate random bytes securely');

    return bin2hex($data);
}

// }}}
